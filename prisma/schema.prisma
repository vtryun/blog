// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model User {
  id            String    @id @default(cuid())
  // better-auth 
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  bio           String?
  avatarUrl     String?   @map("avatar_url")
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Post {
  id         String     @id @default(cuid())
  title      String
  slug       String     @unique
  content    Json
  excerpt    String?
  coverImage String?    @map("cover_image")
  status     PostStatus @default(DRAFT)
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String     @map("author_id")
  tags       Tag[]      @relation("PostTags")
  category   Category?  @relation(fields: [categoryId], references: [id])
  categoryId String?    @map("category_id")
  comments   Comment[]
  likes      Like[]
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  @@index([slug])
  @@map("posts")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  posts     Post[]   @relation("PostTags")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("tags")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now()) @map("created_at")

  @@map("categories")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @map("author_id")
  post      Post      @relation(fields: [postId], references: [id])
  postId    String    @map("post_id")
  parentId  String?   @map("parent_id")
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime  @default(now()) @map("created_at")

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, postId])
  @@map("likes")
}

enum Role {
  USER
  ADMIN
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
